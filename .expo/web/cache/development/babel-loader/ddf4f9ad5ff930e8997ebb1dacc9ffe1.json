{"ast":null,"code":"import React from \"react\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport * as Yup from \"yup\";\nimport { AppForm, AppFormField, AppFormPicker, SubmitButton } from \"../components/forms\";\nimport Screen from \"../components/Screen\";\nimport FormImagePicker from \"../components/forms/FormImagePicker\";\nimport BackNavigation from \"../components/BackNavigation\";\nimport colors from \"../config/colors\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar validationSchema = Yup.object().shape({\n  name: Yup.string().required().min(2).label(\"Name\"),\n  email: Yup.string().required().email().label(\"Email\"),\n  password: Yup.string().required().min(4).label(\"Password\"),\n  passwordConfirmation: Yup.string().oneOf([Yup.ref(\"password\"), null], \"Passwords must match\"),\n  gender: Yup.object().required().nullable().label(\"Gender\"),\n  age: Yup.number().required().min(18).label(\"Age\"),\n  images: Yup.array().min(1, \"Please select at least one image.\")\n});\nvar categories = [{\n  label: \"Female\",\n  value: 1\n}, {\n  label: \"Male\",\n  value: 2\n}, {\n  label: \"Non-binary\",\n  value: 3\n}];\n\nfunction CreateNewUserScreen() {\n  return _jsxs(Screen, {\n    style: styles.container,\n    children: [_jsx(BackNavigation, {\n      backgroundColor: colors.white,\n      rightIconColor: colors.white\n    }), _jsx(Text, {\n      style: [styles.text],\n      children: \"First, let's create your profile\"\n    }), _jsxs(AppForm, {\n      initialValues: {\n        name: \"\",\n        email: \"\",\n        password: \"\",\n        gender: null,\n        age: \"\",\n        images: []\n      },\n      onSubmit: function onSubmit(values) {\n        return console.log(values);\n      },\n      validationSchema: validationSchema,\n      children: [_jsx(FormImagePicker, {\n        name: \"images\"\n      }), _jsx(AppFormField, {\n        maxLength: 50,\n        name: \"name\",\n        placeholder: \"Enter your full name\"\n      }), _jsx(AppFormField, {\n        keyboardtype: \"email-address\",\n        name: \"email\",\n        autoCapitalize: \"none\",\n        autoCorrect: false,\n        placeholder: \"Enter your email address\",\n        textContentType: \"emailAddress\"\n      }), _jsx(AppFormField, {\n        autoCapitalize: \"none\",\n        autoCorrect: false,\n        name: \"password\",\n        placeholder: \"Create a password\",\n        secureTextEntry: true,\n        textContentType: \"password\"\n      }), _jsx(AppFormField, {\n        autoCapitalize: \"none\",\n        autoCorrect: false,\n        name: \"passwordConfirmation\",\n        placeholder: \"Confirm password\",\n        secureTextEntry: true,\n        textContentType: \"password\"\n      }), _jsx(AppFormPicker, {\n        items: categories,\n        name: \"gender\",\n        placeholder: \"Gender\"\n      }), _jsx(AppFormField, {\n        keyboardtype: \"numeric\",\n        maxLength: 3,\n        name: \"age\",\n        placeholder: \"Enter your age\"\n      }), _jsx(SubmitButton, {\n        title: \"Continue\"\n      })]\n    })]\n  });\n}\n\nvar styles = StyleSheet.create({\n  container: {\n    padding: 10,\n    justifyContent: \"flex-end\"\n  },\n  text: {\n    fontSize: 20,\n    fontWeight: \"bold\",\n    textAlign: \"center\"\n  }\n});\nexport default CreateNewUserScreen;","map":{"version":3,"sources":["C:/Users/gabyc/OneDrive/Documents/GitHub/Plenty-of-Pups/app/screens/CreateNewUserScreen.js"],"names":["React","Yup","AppForm","AppFormField","AppFormPicker","SubmitButton","Screen","FormImagePicker","BackNavigation","colors","validationSchema","object","shape","name","string","required","min","label","email","password","passwordConfirmation","oneOf","ref","gender","nullable","age","number","images","array","categories","value","CreateNewUserScreen","styles","container","white","text","values","console","log","StyleSheet","create","padding","justifyContent","fontSize","fontWeight","textAlign"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport { StyleSheet, Text } from \"react-native\";\r\nimport * as Yup from \"yup\";\r\n\r\nimport {\r\n  AppForm,\r\n  AppFormField,\r\n  AppFormPicker,\r\n  SubmitButton,\r\n} from \"../components/forms\";\r\nimport Screen from \"../components/Screen\";\r\nimport FormImagePicker from \"../components/forms/FormImagePicker\";\r\nimport BackNavigation from \"../components/BackNavigation\";\r\nimport colors from \"../config/colors\";\r\n\r\n\r\nconst validationSchema = Yup.object().shape({\r\n  name: Yup.string().required().min(2).label(\"Name\"),\r\n  email: Yup.string().required().email().label(\"Email\"),\r\n  password: Yup.string().required().min(4).label(\"Password\"),\r\n  passwordConfirmation: Yup.string().oneOf(\r\n    [Yup.ref(\"password\"), null],\r\n    \"Passwords must match\"\r\n  ),\r\n  gender: Yup.object().required().nullable().label(\"Gender\"),\r\n  age: Yup.number().required().min(18).label(\"Age\"),\r\n  images: Yup.array().min(1, \"Please select at least one image.\"),\r\n});\r\n\r\nconst categories = [\r\n  { label: \"Female\", value: 1 },\r\n  { label: \"Male\", value: 2 },\r\n  { label: \"Non-binary\", value: 3 },\r\n];\r\n\r\nfunction CreateNewUserScreen() {\r\n  return (\r\n    <Screen style={styles.container}>\r\n      <BackNavigation backgroundColor={colors.white} rightIconColor={colors.white} />\r\n      <Text style={[styles.text]}>First, let's create your profile</Text>\r\n      <AppForm\r\n        initialValues={{\r\n          name: \"\",\r\n          email: \"\",\r\n          password: \"\",\r\n          gender: null,\r\n          age: \"\",\r\n          images: [],\r\n        }}\r\n        onSubmit={(values) => console.log(values)}\r\n        validationSchema={validationSchema}\r\n      >\r\n        <FormImagePicker name=\"images\" />\r\n        <AppFormField\r\n          maxLength={50}\r\n          name=\"name\"\r\n          placeholder=\"Enter your full name\"\r\n        />\r\n        <AppFormField\r\n          keyboardtype=\"email-address\"\r\n          name=\"email\"\r\n          autoCapitalize=\"none\"\r\n          autoCorrect={false}\r\n          placeholder=\"Enter your email address\"\r\n          textContentType=\"emailAddress\"\r\n        />\r\n        <AppFormField\r\n          autoCapitalize=\"none\"\r\n          autoCorrect={false}\r\n          name=\"password\"\r\n          placeholder=\"Create a password\"\r\n          secureTextEntry\r\n          textContentType=\"password\"\r\n        />\r\n        <AppFormField\r\n          autoCapitalize=\"none\"\r\n          autoCorrect={false}\r\n          name=\"passwordConfirmation\"\r\n          placeholder=\"Confirm password\"\r\n          secureTextEntry\r\n          textContentType=\"password\"\r\n        />\r\n        <AppFormPicker items={categories} name=\"gender\" placeholder=\"Gender\" />\r\n        <AppFormField\r\n          keyboardtype=\"numeric\"\r\n          maxLength={3}\r\n          name=\"age\"\r\n          placeholder=\"Enter your age\"\r\n        />\r\n        <SubmitButton title=\"Continue\" />\r\n      </AppForm>\r\n    </Screen>\r\n  );\r\n}\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    padding: 10,\r\n    justifyContent: \"flex-end\",\r\n  },\r\n  text: {\r\n    fontSize: 20,\r\n    fontWeight: \"bold\",\r\n    textAlign: \"center\",\r\n  },\r\n});\r\n\r\nexport default CreateNewUserScreen;\r\n"]},"metadata":{},"sourceType":"module"}