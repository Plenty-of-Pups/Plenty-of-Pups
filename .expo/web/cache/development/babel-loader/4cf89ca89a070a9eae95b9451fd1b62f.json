{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState } from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TouchableWithoutFeedback from \"react-native-web/dist/exports/TouchableWithoutFeedback\";\nimport Modal from \"react-native-web/dist/exports/Modal\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport { MaterialCommunityIcons } from \"@expo/vector-icons\";\nimport AppText from \"./AppText\";\nimport Screen from \"./Screen\";\nimport PickerItem from \"./PickerItem\";\nimport colors from \"../config/colors\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\n\nfunction AppPicker(_ref) {\n  var icon = _ref.icon,\n      items = _ref.items,\n      onSelectItem = _ref.onSelectItem,\n      placeholder = _ref.placeholder,\n      selectedItem = _ref.selectedItem;\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      modalVisible = _useState2[0],\n      setModalVisible = _useState2[1];\n\n  return _jsxs(_Fragment, {\n    children: [_jsx(TouchableWithoutFeedback, {\n      onPress: function onPress() {\n        return setModalVisible(true);\n      },\n      children: _jsxs(View, {\n        style: styles.container,\n        children: [icon && _jsx(MaterialCommunityIcons, {\n          name: icon,\n          size: 20,\n          color: defaultStyles.colors.medium,\n          style: styles.icon\n        }), selectedItem ? _jsx(AppText, {\n          style: styles.text,\n          children: selectedItem.label\n        }) : _jsx(AppText, {\n          style: styles.placeholder,\n          children: placeholder\n        }), _jsx(MaterialCommunityIcons, {\n          name: \"chevron-down\",\n          size: 20,\n          color: defaultStyles.colors.medium\n        })]\n      })\n    }), _jsx(Modal, {\n      visible: modalVisible,\n      animationType: \"slide\",\n      children: _jsxs(Screen, {\n        children: [_jsx(Button, {\n          title: \"Close\",\n          onPress: function onPress() {\n            return setModalVisible(false);\n          }\n        }), _jsx(FlatList, {\n          data: items,\n          keyExtractor: function keyExtractor(item) {\n            return item.value.toString();\n          },\n          renderItem: function renderItem(_ref2) {\n            var item = _ref2.item;\n            return _jsx(PickerItem, {\n              label: item.label,\n              onPress: function onPress() {\n                setModalVisible(false);\n                onSelectItem(item);\n              }\n            });\n          }\n        })]\n      })\n    })]\n  });\n}\n\nvar styles = StyleSheet.create({\n  container: {\n    backgroundColor: colors.light,\n    borderRadius: 25,\n    flexDirection: \"row\",\n    width: \"100%\",\n    padding: 15,\n    marginVertical: 10\n  },\n  icon: {\n    marginRight: 10\n  },\n  placeholder: {\n    flex: 1\n  },\n  text: {\n    flex: 1\n  }\n});\nexport default AppPicker;","map":{"version":3,"sources":["/Users/ethanchen/Documents/GitHub/Plenty-of-Pups/app/components/AppPicker.js"],"names":["React","useState","MaterialCommunityIcons","AppText","Screen","PickerItem","colors","AppPicker","icon","items","onSelectItem","placeholder","selectedItem","modalVisible","setModalVisible","styles","container","defaultStyles","medium","text","label","item","value","toString","StyleSheet","create","backgroundColor","light","borderRadius","flexDirection","width","padding","marginVertical","marginRight","flex"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport {\n  View,\n  StyleSheet,\n  TouchableWithoutFeedback,\n  Modal,\n  Button,\n  FlatList,\n} from \"react-native\";\nimport { MaterialCommunityIcons } from \"@expo/vector-icons\";\n\nimport AppText from \"./AppText\";\nimport Screen from \"./Screen\";\n//import defaultStyles from \"../config/styles\";\nimport PickerItem from \"./PickerItem\";\nimport colors from \"../config/colors\";\n\nfunction AppPicker({ icon, items, onSelectItem, placeholder, selectedItem }) {\n  const [modalVisible, setModalVisible] = useState(false);\n\n  return (\n    <>\n      <TouchableWithoutFeedback onPress={() => setModalVisible(true)}>\n        <View style={styles.container}>\n          {icon && (\n            <MaterialCommunityIcons\n              name={icon}\n              size={20}\n              color={defaultStyles.colors.medium}\n              style={styles.icon}\n            />\n          )}\n          {selectedItem ? (\n            <AppText style={styles.text}>{selectedItem.label}</AppText>\n          ) : (\n            <AppText style={styles.placeholder}>{placeholder}</AppText>\n          )}\n\n          <MaterialCommunityIcons\n            name=\"chevron-down\"\n            size={20}\n            color={defaultStyles.colors.medium}\n          />\n        </View>\n      </TouchableWithoutFeedback>\n      <Modal visible={modalVisible} animationType=\"slide\">\n        <Screen>\n          <Button title=\"Close\" onPress={() => setModalVisible(false)} />\n          <FlatList\n            data={items}\n            keyExtractor={(item) => item.value.toString()}\n            renderItem={({ item }) => (\n              <PickerItem\n                label={item.label}\n                onPress={() => {\n                  setModalVisible(false);\n                  onSelectItem(item);\n                }}\n              />\n            )}\n          />\n        </Screen>\n      </Modal>\n    </>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    backgroundColor: colors.light,\n    borderRadius: 25,\n    flexDirection: \"row\",\n    width: \"100%\",\n    padding: 15,\n    marginVertical: 10,\n  },\n  icon: {\n    marginRight: 10,\n  },\n  placeholder: {\n    flex: 1,\n  },\n  text: {\n    flex: 1,\n  },\n});\n\nexport default AppPicker;\n"]},"metadata":{},"sourceType":"module"}