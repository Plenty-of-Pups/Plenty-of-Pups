{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useEffect } from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport TouchableWithoutFeedback from \"react-native-web/dist/exports/TouchableWithoutFeedback\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport { MaterialCommunityIcons } from \"@expo/vector-icons\";\nimport * as ImagePicker from \"expo-image-picker\";\nimport colors from \"../config/colors\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nfunction ImageInput(_ref) {\n  var imageUri = _ref.imageUri,\n      onChangeImage = _ref.onChangeImage;\n  useEffect(function () {\n    requestPermission();\n  }, []);\n\n  var requestPermission = function requestPermission() {\n    var _await$ImagePicker$re, granted;\n\n    return _regeneratorRuntime.async(function requestPermission$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(ImagePicker.requestMediaLibraryPermissionsAsync());\n\n          case 2:\n            _await$ImagePicker$re = _context.sent;\n            granted = _await$ImagePicker$re.granted;\n            if (!granted) alert(\"You need to enable permission to access the library.\");\n\n          case 5:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var handlePress = function handlePress() {\n    if (!imageUri) selectImage();else Alert.alert(\"Delete\", \"Are you sure you want to delete this image?\", [{\n      text: \"Yes\",\n      onPress: function onPress() {\n        return onChangeImage(null);\n      }\n    }, {\n      text: \"No\"\n    }]);\n  };\n\n  var selectImage = function selectImage() {\n    var result;\n    return _regeneratorRuntime.async(function selectImage$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.prev = 0;\n            _context2.next = 3;\n            return _regeneratorRuntime.awrap(ImagePicker.launchImageLibraryAsync({\n              mediaTypes: ImagePicker.MediaTypeOptions.Images,\n              quality: 0.5\n            }));\n\n          case 3:\n            result = _context2.sent;\n            if (!result.cancelled) onChangeImage(result.uri);\n            _context2.next = 10;\n            break;\n\n          case 7:\n            _context2.prev = 7;\n            _context2.t0 = _context2[\"catch\"](0);\n            console.log(\"Error reading an image\", _context2.t0);\n\n          case 10:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, [[0, 7]], Promise);\n  };\n\n  return _jsx(TouchableWithoutFeedback, {\n    onPress: handlePress,\n    children: _jsxs(View, {\n      style: styles.container,\n      children: [!imageUri && _jsx(MaterialCommunityIcons, {\n        color: colors.medium,\n        name: \"camera\",\n        size: 40\n      }), imageUri && _jsx(Image, {\n        source: {\n          uri: imageUri\n        },\n        style: styles.image\n      })]\n    })\n  });\n}\n\nvar styles = StyleSheet.create({\n  container: {\n    alignItems: \"center\",\n    backgroundColor: colors.light,\n    borderRadius: 15,\n    height: 120,\n    justifyContent: \"center\",\n    marginVertical: 10,\n    overflow: \"hidden\",\n    width: 120\n  },\n  image: {\n    height: \"100%\",\n    width: \"100%\"\n  }\n});\nexport default ImageInput;","map":{"version":3,"sources":["C:/Users/Nate_Barcelona/OneDrive/Documents/GitHub/Plenty-of-Pups/app/components/ImageInput.js"],"names":["React","useEffect","MaterialCommunityIcons","ImagePicker","colors","ImageInput","imageUri","onChangeImage","requestPermission","requestMediaLibraryPermissionsAsync","granted","alert","handlePress","selectImage","Alert","text","onPress","launchImageLibraryAsync","mediaTypes","MediaTypeOptions","Images","quality","result","cancelled","uri","console","log","styles","container","medium","image","StyleSheet","create","alignItems","backgroundColor","light","borderRadius","height","justifyContent","marginVertical","overflow","width"],"mappings":"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","sourcesContent":["import React, { useEffect } from \"react\";\r\nimport {\r\n  View,\r\n  StyleSheet,\r\n  Image,\r\n  TouchableWithoutFeedback,\r\n  Alert,\r\n} from \"react-native\";\r\nimport { MaterialCommunityIcons } from \"@expo/vector-icons\";\r\nimport * as ImagePicker from \"expo-image-picker\";\r\n\r\nimport colors from \"../config/colors\";\r\n\r\nfunction ImageInput({ imageUri, onChangeImage }) {\r\n  useEffect(() => {\r\n    requestPermission();\r\n  }, []);\r\n\r\n  const requestPermission = async () => {\r\n    const { granted } = await ImagePicker.requestMediaLibraryPermissionsAsync();\r\n    if (!granted) alert(\"You need to enable permission to access the library.\");\r\n  };\r\n\r\n  const handlePress = () => {\r\n    if (!imageUri) selectImage();\r\n    else\r\n      Alert.alert(\"Delete\", \"Are you sure you want to delete this image?\", [\r\n        { text: \"Yes\", onPress: () => onChangeImage(null) },\r\n        { text: \"No\" },\r\n      ]);\r\n  };\r\n\r\n  const selectImage = async () => {\r\n    try {\r\n      const result = await ImagePicker.launchImageLibraryAsync({\r\n        mediaTypes: ImagePicker.MediaTypeOptions.Images,\r\n        quality: 0.5,\r\n      });\r\n      if (!result.cancelled) onChangeImage(result.uri);\r\n    } catch (error) {\r\n      console.log(\"Error reading an image\", error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <TouchableWithoutFeedback onPress={handlePress}>\r\n      <View style={styles.container}>\r\n        {!imageUri && (\r\n          <MaterialCommunityIcons\r\n            color={colors.medium}\r\n            name=\"camera\"\r\n            size={40}\r\n          />\r\n        )}\r\n        {imageUri && <Image source={{ uri: imageUri }} style={styles.image} />}\r\n      </View>\r\n    </TouchableWithoutFeedback>\r\n  );\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    alignItems: \"center\",\r\n    backgroundColor: colors.light,\r\n    borderRadius: 15,\r\n    height: 120,\r\n    justifyContent: \"center\",\r\n    marginVertical: 10,\r\n    overflow: \"hidden\",\r\n    width: 120,\r\n  },\r\n  image: {\r\n    height: \"100%\",\r\n    width: \"100%\",\r\n  },\r\n});\r\n\r\nexport default ImageInput;\r\n"]},"metadata":{},"sourceType":"module"}